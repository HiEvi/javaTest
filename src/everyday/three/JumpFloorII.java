package everyday.three;

/**
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级……它也可以跳上n级。求该青蛙跳上一个n级的台阶总共有多少种跳法。
 * 1  2  3  4  5
 * 1  2  4  8  16
 * 解决思想：设f[i]表示当前跳到第i个台阶的方法数，那么f[i]就是答案，假设现在已经跳到了第n个台阶，那么前一步可以从哪些台阶可以到达呢？
 * 如果上一步跳1步到达第n个台阶，说明上一步在第n-1个台阶，已知跳到第n-1个台阶的方法数为f[n-1]
 * 如果上一步跳2步到达第n个台阶，说明上步在第n-2个台阶，已知跳到第n-2个台阶的方法数为f[n-2]
 * ...
 * 如果上一步跳n步到达第n个台阶，说明上一步在第0个台阶，已知跳到第0个台阶的方法数是f[0]
 * 那么总方法数就是所有可能的和，f[n] = f[n-1]+f[n-2]+...+f[0]
 * 初始条件为 f[0]=f[1]=1
 * 优化：f[n-1] = f[n-2]+f[n-3]+...+f[0]与f[n]相减得到 f[n] = 2*f[n-1]
 * 还可以简化: 仔细观察结果都是2的n-1次方
 */
public class JumpFloorII {
    public int JumpFloorII(int target) {
        if (target <= 1) {
            return 1;
        }
        return (int)Math.pow(2,target-1);
        //or return 1<<(target-1);
    }
}
